name: FrontEnd CD Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "starter/frontend/**"

env:
  EKS_CLUSTER_NAME: cluster

jobs:
  lint:
    name: run lint FrontEnd
    runs-on: ubuntu-latest
    defaults: 
      run:
        working-directory: starter/frontend/    
    steps:
      # Step 1: Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up the latest version of Node.js.
      - name: Set up Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
        # Step 3: Install project dependencies.
      - name: Install dependencies
        run: npm ci
        # Step 4: Execute the linter to check for code quality issues.
      - name: Run the linter
        run:  npm run lint

  test:
    name: run test FrontEnd
    runs-on: ubuntu-latest
    defaults: 
      run:
        working-directory: starter/
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: cd frontend && npm ci
      # Step: Execute tests to validate the frontend code.
      - name: Run tests
        run: cd frontend && npm test 

  build:
    name: build and run FrontEnd
    needs: [lint, test]
    defaults: 
      run:
        working-directory: starter/
    runs-on: ubuntu-latest
    steps:
        # Step 1: Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
         # Step 2: Install dependencies for the frontend.
      - name: Install dependencies
        run: cd frontend && npm ci
      - name: cleanup
        run: |
          unset AWS_DEFAULT_REGION
          unset AWS_REGION
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN

      - name: setup aws
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

        # Step 3: Authenticate to Amazon Elastic Container Registry.
      - name: login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend
          IMAGE_TAG:  ${{ github.sha }}
          REACT_APP_MOVIE_API_URL: http://a5c433d1fc3934ba997664abc58fdc30-1772607146.us-east-1.elb.amazonaws.com
        run: |
          cd frontend &&  docker build --build-arg=REACT_APP_MOVIE_API_URL --tag=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker images    

  deploy:
    name: deploy to EKS
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend/
    steps:
      - name: checkout code
        uses: actions/checkout@v3

        # Configure AWS credentials for deployment.
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
        # Update kubeconfig to connect to the EKS cluster.
      - name: get cluster certificate
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }}
        
      - name: add github action user to kubernetes
        working-directory: setup
        run: |
          ./init.sh || true

      - name: set docker image for kustomize
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG:  ${{ github.sha }}
        working-directory: starter/frontend/k8s
        run: |
          kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
        # Deploy the application using Kubernetes manifests.
      - name: apply the manifests to the cluster
        working-directory: starter/frontend/k8s
        run: kustomize build | kubectl apply --validate=false -f -
