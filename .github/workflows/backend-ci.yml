name : BackEnd CI Workflow

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - "starter/backend/**"
  
env:
  PYTHON_VERSION: 3.12

jobs:
  lint:
    name: run lint BE
    runs-on: ubuntu-latest
    defaults: 
      run:
        working-directory: starter/backend/
    steps:
      # Step 1: Checkout code from repository
      - name: checkout code
        uses: actions/checkout@v3

      # Step 2: Cache pipenv virtualenv to speed up future runs
      - name: cache pipenv environment
        uses: actions/cache@v2
        with:
          path: |
            ~/.local/share/virtualenvs
            .venv
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      # Step 3: Setup Python version 3.11
      - name: setup python environment
        uses: actions/setup-python@v4
        with: 
          python-version: ${{env.PYTHON_VERSION}}

      # Step 4: Install pipenv, dependencies, and flake8 linter
      - name : install dependencies
        run: |
          pip install pipenv
          pipenv install
          pip install flake8

      # Step 5: Run the lint checks using flake8
      - name: run lint
        run: pipenv run lint

  test:
    name: run test BE
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/backend/
    steps:
      # Step 1: Checkout code from repository
      - name: checkout code
        uses: actions/checkout@v3

      # Step 2: Cache pipenv environment
      - name: cache pipenv environment
        uses: actions/cache@v2
        with:
          path: |
            ~/.local/share/virtualenvs
            .venv
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-
      
      # Step 3: Setup Python version 3.11
      - name: setup python environment
        uses: actions/setup-python@v4
        with: 
          python-version: ${{env.PYTHON_VERSION}}
      
      # Step 4: Install pipenv and test dependencies
      - name : install dependencies
        run: |
          pip install pipenv
          pipenv install
          pip install flake8
      
      # Step 5: Run the tests
      - name: run tests
        run: pipenv run test

  build:
    name: build and run BE
    needs: [lint, test] # This job depends on the successful completion of lint and test jobs
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/backend/
    steps:
      # Step 1: Checkout code from repository
      - name: checkout code
        uses: actions/checkout@v3

      # Step 2: Cache pipenv environment
      - name: cache pipenv environment
        uses: actions/cache@v2
        with:
          path: |
            ~/.local/share/virtualenvs
            .venv
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      # Step 3: Setup Python version 3.11
      - name: setup python environment
        uses: actions/setup-python@v4
        with: 
          python-version: ${{env.PYTHON_VERSION}}
      
      # Step 4: Install dependencies
      - name : install dependencies
        run: |
          pip install pipenv
          pipenv install
          pip install flake8

      # Step 5: Configure AWS credentials for deployment
      - name: setup aws
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # Step 6: Log in to Amazon ECR for Docker image push
      - name: login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 7: Build, tag, and push Docker image
      - name: build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: backend
        run: |
          git_sha=$(git rev-parse --short HEAD)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$git_sha .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$git_sha
